import pickle
import numpy
from music21 import instrument, note, stream, chord
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM
from keras.layers import Activation

import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

def prepare_sequences(notes, note_names, n_vocab):
    """ Prepare the sequences used by the Neural Network """
    # map between notes and integers and back
    note_to_int = dict((note, number) for number, note in enumerate(note_names))

    timesteps = 100
    network_input = []
    output = []
    for i in range(0, len(notes) - timesteps, 1):
        sequence_in = notes[i:i + timesteps]
        sequence_out = notes[i + timesteps]
        network_input.append([note_to_int[char] for char in sequence_in])
        output.append(note_to_int[sequence_out])

    n_patterns = len(network_input)

    # reshape the input into a format compatible with LSTM layers
    normalized_input = numpy.reshape(network_input, (n_patterns, timesteps, 1))
    # normalize input
    normalized_input = normalized_input / float(n_vocab)

    return (network_input, normalized_input)

def restore_model(network_input, n_vocab):
    """ create the structure of the neural network """
    model = Sequential()
    model.add(LSTM(
        512,
        input_shape=(network_input.shape[1], network_input.shape[2]),
        return_sequences=True
    ))
    model.add(Dropout(0.3))
    model.add(LSTM(512, return_sequences=True))
    model.add(Dropout(0.3))
    model.add(LSTM(512))
    model.add(Dense(256))
    model.add(Dropout(0.3))
    model.add(Dense(n_vocab))
    model.add(Activation('softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='rmsprop')

    # Load the weights to each node
    model.load_weights('models/weights.hdf5')

    return model

def generate_notes(model, network_input, note_names, n_note):
    """ Generate notes from the neural network based on a sequence of notes """
    # pick a random sequence from the input as a starting point for the prediction
    start = numpy.random.randint(0, len(network_input)-1)

    int_to_note = dict((number, note) for number, note in enumerate(note_names))

    pattern = network_input[start]
    output = []

    # generate 500 notes
    for note_index in range(500):
        input = numpy.reshape(pattern, (1, len(pattern), 1))
        input = input / float(n_note)

        output_note = model.predict(input, verbose=0)

        index = numpy.argmax(output_note)
        result = int_to_note[index]
        output.append(result)

        pattern.append(index)
        pattern = pattern[1:len(pattern)]

    return output

def create_midi(encoded_notes):
    """
    convert the output from the network to notes and create a midi file from
    the notes
    """
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for pattern in encoded_notes:
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)

    midi_stream.write('midi', fp='generated_music/test_output.mid')

def generate():
    """ Generate a piano midi file """
    #load the notes used to train the model
    with open('data/notes', 'rb') as filepath:
        notes = pickle.load(filepath)

    # Get all pitch names
    note_names = sorted(set(item for item in notes))
    # Get all pitch names
    n_vocab = len(set(notes))

    network_input, normalized_input = prepare_sequences(notes, note_names, n_vocab)
    model = restore_model(normalized_input, n_vocab)
    output = generate_notes(model, network_input, note_names, n_vocab)
    create_midi(output)

if __name__ == '__main__':
    generate()
